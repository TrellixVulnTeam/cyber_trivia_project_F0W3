{"version":3,"sources":["Main Page/Game/Game.js","Main Page/GameList/GameList.js","Main Page/Game Search Bar/searchBar.js","Main Page/Api Connection/serverConnection.js","Main Page/App/App.js","index.js","registerServiceWorker.js"],"names":["Game","className","src","alt","this","props","game","React","Component","GameList","games","map","ServerConnection","url","getQuiz","quiz","jwt_token","fetch","headers","response","ok","json","Error","document","write","postQuiz","user","questionObj","data","JSON","stringify","method","body","deleteQuiz","jsonResponse","putQuiz","addOrRemove","question","add_or_remove","getQuizzes","axios","get","then","catch","error","register","password","auth","updatePercentage","quizName","percentage","getStats","username","App","state","searchAPI","bind","setState","jwtToken","ReactDOM","render","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log"],"mappings":"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","file":"static/js/main.edb88f37.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Game\">\r\n                <div className=\"image-container\">\r\n                    <img src='./istockphoto-973102672-170667a.jpg' alt=''/>\r\n                </div>\r\n                <h2>{this.props.game}</h2>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport './GameList.css';\r\nimport Game from '../Game/Game';\r\n\r\nclass GameList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"GameList\">\r\n                {\r\n                    this.props.games.map(game => {\r\n                        return <Game game={game}/>\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GameList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameName: ''\r\n        }\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleGameNameChange = this.handleGameNameChange.bind(this);\r\n    }\r\n\r\n    handleGameNameChange(event) {\r\n        this.setState({gameName: event.target.value});\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchAPI(this.state.gameName);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className='SearchBar-fields'>\r\n                    <input placeholder=\"Search Games\" onChange={this.handleGameNameChange}/>\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Search</a>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\n\r\nconst ServerConnection = {\r\n    url: \"https://trivia-game-cyber.herokuapp.com/\",\r\n\r\n\r\n\r\n    async getQuiz(quiz, jwt_token) {\r\n        try {\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", \"Authorization\": \"JWT \" + jwt_token[1]}});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch(error) {\r\n            document.write(error);\r\n        }\r\n    },\r\n\r\n    async postQuiz(quiz, user, questionObj) {\r\n        try {\r\n            const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async deleteQuiz(quiz) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error);\r\n        }\r\n\r\n    },\r\n\r\n    async putQuiz(quiz, addOrRemove, question, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            if (addOrRemove === \"add_question\") {\r\n                const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\r\n                const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\r\n                if (response.ok) {\r\n                    const jsonResponse = await response.json();\r\n                    return jsonResponse['message'];\r\n\r\n\r\n            }\r\n            else if (addOrRemove === \"remove_question\") {\r\n                    const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\r\n                    const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\r\n                    if (response.ok) {\r\n                        const jsonResponse = await response.json();\r\n                        return jsonResponse['message'];\r\n                    }\r\n            }\r\n        }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n     getQuizzes() {\r\n         const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n\r\n         axios.get(`${this.url}quizzes`, {headers: headers})\r\n             .then(response => {\r\n                 if (response.ok) {\r\n                     return response.json();\r\n                 }\r\n             }).then(jsonResponse => {\r\n                 return jsonResponse['quizzes']\r\n         }).catch(error => {\r\n             document.write(error);\r\n         })\r\n        //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\r\n        //     if (response.ok) {\r\n        //         const jsonResponse = await response.json();\r\n        //         return jsonResponse['quizzes'];\r\n        //     }\r\n        //     throw new Error('Request failed!');\r\n        // }\r\n        // catch (error) {\r\n        //     document.write(error)\r\n        // }\r\n    },\r\n\r\n    async register(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const data = JSON.stringify({\"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n\r\n    },\r\n\r\n    async auth(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"username\": user, \"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['access_token'];\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async updatePercentage(quizName, percentage, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async getStats(username) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ServerConnection;","import GameList from \"../GameList/GameList\";\nimport './App.css';\nimport React from 'react';\nimport SearchBar from \"../Game Search Bar/searchBar\";\nimport ServerConnection from '../Api Connection/serverConnection'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      games: []\n    };\n\n    this.searchAPI = this.searchAPI.bind(this);\n    this.getQuizzes = this.getQuizzes.bind(this);\n\n    this.getQuizzes();\n\n\n  }\n  getQuizzes() {\n    ServerConnection.getQuizzes().then(games => {\n      this.setState( {games: games});\n    });\n  }\n\n  searchAPI(quiz, jwtToken) {\n    ServerConnection.getQuiz(quiz, jwtToken).then(game => {\n      this.setState({games: [game]});\n    }) }\n\n  render() {\n    return (\n        <div className=\"app\">\n          <h1>Trivia Game</h1>\n          {/*<SearchBar searchAPI={this.searchAPI}/>*/}\n          <GameList games={this.state.games}/>\n        </div>\n    )\n  }\n\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Main Page/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}