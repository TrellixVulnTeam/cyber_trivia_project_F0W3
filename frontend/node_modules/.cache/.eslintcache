[{"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\index.js":"1","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\registerServiceWorker.js":"2","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\index.js":"3","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\SignUpContainer.js":"4","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\SignUpForm.js":"5","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\validate.js":"6","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\PasswordStr.js":"7","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\App.js":"8","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\index.js":"9","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Navigation.js":"10","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Footer.js":"11","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\App\\App.js":"12","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\App\\mainPageImage.js":"13","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\GameList\\GameList.js":"14","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Api Connection\\serverConnection.js":"15","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Game Search Bar\\searchBar.js":"16","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Game\\Game.js":"17"},{"size":260,"mtime":1619093654543,"results":"18","hashOfConfig":"19"},{"size":2153,"mtime":1497473090000,"results":"20","hashOfConfig":"19"},{"size":378,"mtime":1619030575536,"results":"21","hashOfConfig":"19"},{"size":3260,"mtime":1619095419241,"results":"22","hashOfConfig":"19"},{"size":1908,"mtime":1619027135845,"results":"23","hashOfConfig":"19"},{"size":1799,"mtime":1618926638000,"results":"24","hashOfConfig":"19"},{"size":798,"mtime":1618926638000,"results":"25","hashOfConfig":"19"},{"size":620,"mtime":1619094362281,"results":"26","hashOfConfig":"19"},{"size":227,"mtime":1619093356291,"results":"27","hashOfConfig":"19"},{"size":1624,"mtime":1619031914665,"results":"28","hashOfConfig":"19"},{"size":453,"mtime":1619030138862,"results":"29","hashOfConfig":"19"},{"size":989,"mtime":1619091004211,"results":"30","hashOfConfig":"19"},{"size":582,"mtime":1619024766943,"results":"31","hashOfConfig":"19"},{"size":454,"mtime":1619019567878,"results":"32","hashOfConfig":"19"},{"size":6068,"mtime":1619018821846,"results":"33","hashOfConfig":"19"},{"size":1031,"mtime":1618935573389,"results":"34","hashOfConfig":"19"},{"size":456,"mtime":1619025069352,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dtapi1",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\index.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\registerServiceWorker.js",[],["75","76"],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\index.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\SignUpContainer.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\SignUpForm.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\validate.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\signUp\\PasswordStr.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\App.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\index.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Navigation.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\App\\App.js",["77","78"],"import GameList from \"../GameList/GameList\";\nimport './App.css';\nimport React from 'react';\nimport SearchBar from \"../Game Search Bar/searchBar\";\nimport ServerConnection from '../Api Connection/serverConnection'\nimport aiImage from '../Game Search Bar/ai-machine-learning.png'\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      games: []\n    };\n\n    // this.searchAPI = this.searchAPI.bind(this);\n    this.getQuizzes = this.getQuizzes.bind(this);\n    this.getQuizzes();\n\n\n  }\n  getQuizzes() {\n    ServerConnection.getQuizzes().then(games => {\n      this.setState( {games: games});\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"home\">\n          <div className=\"container\">\n            <h1>Trivia Game</h1>\n            <div className=\"image\">\n              <img src={aiImage} />\n            </div>\n\n\n            <GameList games={this.state.games}/>\n          </div>\n\n        </div>\n    )\n  }\n\n\n}\n\n\n\nexport default Home;\n","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\App\\mainPageImage.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\GameList\\GameList.js",[],"C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Api Connection\\serverConnection.js",["79"],"import axios from 'axios';\r\nconst fetch = require('node-fetch')\r\n\r\n\r\n\r\n//\r\nconst ServerConnection = {\r\n    url: \"http://127.0.0.1:5000/\",\r\n\r\n\r\n\r\n    async getQuiz(quiz, jwt_token) {\r\n        try {\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", \"Authorization\": \"JWT \" + jwt_token[1]}});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch(error) {\r\n            document.write(error);\r\n        }\r\n    },\r\n\r\n    async postQuiz(quiz, user, questionObj) {\r\n        try {\r\n            const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async deleteQuiz(quiz) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error);\r\n        }\r\n\r\n    },\r\n\r\n    async putQuiz(quiz, addOrRemove, question, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            if (addOrRemove === \"add_question\") {\r\n                const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\r\n                const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\r\n                if (response.ok) {\r\n                    const jsonResponse = await response.json();\r\n                    return jsonResponse['message'];\r\n\r\n\r\n            }\r\n            else if (addOrRemove === \"remove_question\") {\r\n                    const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\r\n                    const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\r\n                    if (response.ok) {\r\n                        const jsonResponse = await response.json();\r\n                        return jsonResponse['message'];\r\n                    }\r\n            }\r\n        }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n     async getQuizzes() {\r\n        try {\r\n             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n             const response = await fetch(`${ServerConnection.url}quizzes`, {headers: headers});\r\n             if (response.ok) {\r\n                 const jsonResponse = await response.json();\r\n                 return jsonResponse['quizzes'];\r\n             }\r\n             throw new Error('Request failed!');\r\n         }\r\n        catch (error) {\r\n            document.write(error)\r\n    }},\r\n\r\n    async register(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const data = JSON.stringify({\"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n\r\n    },\r\n\r\n    async auth(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"username\": user, \"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['access_token'];\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async updatePercentage(quizName, percentage, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async getStats(username) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ServerConnection;","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Game Search Bar\\searchBar.js",["80"],"import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameName: ''\r\n        }\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleGameNameChange = this.handleGameNameChange.bind(this);\r\n    }\r\n\r\n    handleGameNameChange(event) {\r\n        this.setState({gameName: event.target.value});\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchAPI(this.state.gameName);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className='SearchBar-fields'>\r\n                    <input placeholder=\"Search Games\" onChange={this.handleGameNameChange}/>\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Search</a>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","C:\\Users\\coolermaster\\PycharmProjects\\Updated_trivia_project\\frontend\\src\\components\\Main Page\\Game\\Game.js",["81"],"import React from 'react';\r\nimport './Game.css';\r\nimport triviaphoto from './istockphoto-973102672-170667a.jpg'\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Game\">\r\n                <div className=\"image-container\">\r\n                    <img src={triviaphoto} alt='ai photo'/>\r\n                </div>\r\n                <h2>{this.props.game}</h2>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Game;",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":34,"column":15,"nodeType":"92","endLine":34,"endColumn":36},{"ruleId":"86","severity":1,"message":"93","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":13},{"ruleId":"94","severity":1,"message":"95","line":31,"column":21,"nodeType":"92","endLine":31,"endColumn":52},{"ruleId":"96","severity":1,"message":"97","line":10,"column":21,"nodeType":"92","endLine":10,"endColumn":60},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'SearchBar' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]