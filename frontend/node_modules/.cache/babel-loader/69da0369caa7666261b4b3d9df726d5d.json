{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coolermaster\\\\PycharmProjects\\\\Updated_trivia_project\\\\frontend\\\\src\\\\components\\\\Do Quiz\\\\DoQuiz.js\";\nimport React from 'react';\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\nimport DoQuestion from \"./DoQuestion\";\nimport Button from \"react-bootstrap/Button\";\nimport HomeButton from \"../Sign Up/returnToHomePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DoQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionList: [],\n      userAnswers: []\n    };\n  }\n\n  async componentDidMount() {\n    this.getQuiz = this.getQuiz.bind(this);\n    this.getScore = this.getScore.bind(this);\n    await this.setQuestionList();\n  }\n\n  async setQuestionList() {\n    let questionList = await this.getQuiz();\n    this.setState({\n      questionList: Object.values(questionList)\n    });\n  }\n\n  async getQuiz() {\n    this.questionList = await ServerConnection.getQuiz(this.props.quiz, this.props.jwtToken).then(response => response);\n  }\n\n  addAnswer(answer) {\n    this.userAnswers.push(answer);\n  }\n\n  showResult() {\n    return this.userAnswers.length < this.questionList.length;\n  }\n\n  getScore() {\n    return this.userAnswers * 100 / this.questionList.length;\n  }\n\n  async updatePercentage() {\n    const percentage = this.getScore();\n    return await ServerConnection.updatePercentage(this.props.quiz, percentage, this.props.user);\n  }\n\n  render() {\n    if (this.state.questionList.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading Quiz ... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    } else {\n      let questionsList = this.questionList.map(question => /*#__PURE__*/_jsxDEV(DoQuestion, {\n        question: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 67\n      }, this));\n      let quizShow;\n\n      if (this.showResult()) {\n        quizShow = {\n          questionsList\n        };\n      } else {\n        quizShow = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-section\",\n          children: [\"You scored \", this.getScore(), \" out of 100! submitButton = \", /*#__PURE__*/_jsxDEV(Button, {\n            block: true,\n            size: \"lg\",\n            type: \"submit\",\n            onClick: this.updatePercentage.bind(this),\n            children: \"Submit Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(HomeButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz\",\n        children: quizShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n}\n\nexport default DoQuiz;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/components/Do Quiz/DoQuiz.js"],"names":["React","ServerConnection","DoQuestion","Button","HomeButton","DoQuiz","Component","constructor","props","state","questionList","userAnswers","componentDidMount","getQuiz","bind","getScore","setQuestionList","setState","Object","values","quiz","jwtToken","then","response","addAnswer","answer","push","showResult","length","updatePercentage","percentage","user","render","questionsList","map","question","quizShow"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\r\nimport DoQuestion from \"./DoQuestion\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport HomeButton from \"../Sign Up/returnToHomePage\";\r\n\r\nclass DoQuiz extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            questionList: [],\r\n            userAnswers: []\r\n        }\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getQuiz = this.getQuiz.bind(this);\r\n        this.getScore = this.getScore.bind(this);\r\n        await this.setQuestionList()\r\n    }\r\n\r\n    async setQuestionList() {\r\n        let questionList = await this.getQuiz();\r\n        this.setState( {questionList: Object.values(questionList)})\r\n    }\r\n\r\n\r\n    async getQuiz() {\r\n        this.questionList = await ServerConnection.getQuiz(this.props.quiz, this.props.jwtToken).then(response => response);\r\n    }\r\n\r\n    addAnswer(answer) {\r\n        this.userAnswers.push(answer);\r\n    }\r\n\r\n    showResult() {\r\n        return this.userAnswers.length < this.questionList.length;\r\n    }\r\n\r\n    getScore() {\r\n        return this.userAnswers * 100 / this.questionList.length;\r\n    }\r\n\r\n    async updatePercentage() {\r\n        const percentage = this.getScore();\r\n        return await ServerConnection.updatePercentage(this.props.quiz, percentage, this.props.user)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.questionList.length === 0) {\r\n            return (\r\n                <span>Loading Quiz ... </span>\r\n            )\r\n        } else {\r\n            let questionsList = this.questionList.map(question => <DoQuestion question={question}/>)\r\n            let quizShow;\r\n            if (this.showResult()) {\r\n                quizShow = {questionsList}\r\n            } else {\r\n                quizShow = (\r\n                    <div className=\"score-section\">\r\n                        You scored {this.getScore()} out of 100!\r\n                        submitButton = <Button block size=\"lg\" type=\"submit\"\r\n                                               onClick={this.updatePercentage.bind(this)}>Submit Quiz</Button>\r\n                        <HomeButton/>\r\n                    </div>\r\n                )\r\n            }\r\n            return (<div className=\"quiz\">\r\n                    {quizShow}\r\n                </div>\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default DoQuiz;"]},"metadata":{},"sourceType":"module"}