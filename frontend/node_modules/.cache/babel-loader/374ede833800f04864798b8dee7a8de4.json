{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coolermaster\\\\PycharmProjects\\\\Updated_trivia_project\\\\frontend\\\\src\\\\components\\\\Do Quiz\\\\DoQuestion.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DoQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerList = [];\n    this.getCorrectAnswer = this.getCorrectAnswer.bind(this);\n    this.checkUserAnswer = this.checkUserAnswer.bind(this);\n    this.updateAnswerList = this.updateAnswerList.bind(this);\n    this.returnAnsweredQuestion = this.returnAnsweredQuestion.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n  }\n\n  getCorrectAnswer() {\n    return this.answerList['correct_answer'];\n  }\n\n  checkUserAnswer(userAnswer, correctAnswer) {\n    return userAnswer === correctAnswer;\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      // Generate random number\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  updateAnswerList() {\n    let answerList = [this.props.question[\"answer_dict\"]['correct_answer']];\n    this.props.question[\"answer_dict\"]['wrong_answers'].forEach(answer => {\n      answerList.push(answer);\n    });\n    this.shuffleArray(answerList);\n    this.answerList = answerList;\n  }\n\n  returnAnsweredQuestion(event, answerOption) {\n    event.preventDefault();\n    const correctAnswer = this.getCorrectAnswer();\n    const tOrF = this.checkUserAnswer(answerOption, correctAnswer);\n    this.props.addAnswer(tOrF);\n  }\n\n  render() {\n    this.updateAnswerList();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-count\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", this.props.questionNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: this.props.question['question']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: this.answerList.map(answerOption => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => this.returnAnsweredQuestion(event, answerOption),\n            children: answerOption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default DoQuestion;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/components/Do Quiz/DoQuestion.js"],"names":["React","DoQuestion","Component","constructor","props","answerList","getCorrectAnswer","bind","checkUserAnswer","updateAnswerList","returnAnsweredQuestion","shuffleArray","userAnswer","correctAnswer","array","i","length","j","Math","floor","random","temp","question","forEach","answer","push","event","answerOption","preventDefault","tOrF","addAnswer","render","questionNumber","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass DoQuestion extends React.Component {\r\n    constructor(props) {\r\n        super (props);\r\n        this.answerList = []\r\n\r\n        this.getCorrectAnswer = this.getCorrectAnswer.bind(this);\r\n        this.checkUserAnswer = this.checkUserAnswer.bind(this);\r\n        this.updateAnswerList = this.updateAnswerList.bind(this);\r\n        this.returnAnsweredQuestion = this.returnAnsweredQuestion.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n    }\r\n\r\n    getCorrectAnswer() {\r\n        return this.answerList['correct_answer']\r\n    }\r\n\r\n    checkUserAnswer(userAnswer, correctAnswer) {\r\n        return userAnswer === correctAnswer;\r\n    }\r\n\r\n    shuffleArray(array) {   for (let i = array.length - 1; i > 0; i--) {\r\n        // Generate random number\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n\r\n        return array;\r\n    }\r\n\r\n    updateAnswerList() {\r\n        let answerList = [this.props.question[\"answer_dict\"]['correct_answer']]\r\n        this.props.question[\"answer_dict\"]['wrong_answers'].forEach(answer => {\r\n            answerList.push(answer)\r\n        })\r\n\r\n        this.shuffleArray(answerList);\r\n        this.answerList = answerList;\r\n    }\r\n\r\n    returnAnsweredQuestion(event, answerOption) {\r\n        event.preventDefault();\r\n        const correctAnswer = this.getCorrectAnswer()\r\n        const tOrF = this.checkUserAnswer(answerOption, correctAnswer)\r\n        this.props.addAnswer(tOrF);\r\n\r\n    }\r\n\r\n    render() {\r\n        this.updateAnswerList()\r\n        return (<div className=\"question-text\">\r\n            <div className=\"question-count\">\r\n                <span>Question {this.props.questionNumber}</span>\r\n            </div>\r\n            <div className=\"question-text\">\r\n                {this.props.question['question']}\r\n            </div>\r\n            <div className=\"answer-section\">\r\n                {this.answerList.map((answerOption) => {\r\n                    return <button onClick={(event) => this.returnAnsweredQuestion(event, answerOption)}>{answerOption}</button>\r\n                })}\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default DoQuestion;"]},"metadata":{},"sourceType":"module"}