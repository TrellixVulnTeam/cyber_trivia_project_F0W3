{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coolermaster\\\\PycharmProjects\\\\Updated_trivia_project\\\\frontend\\\\src\\\\components\\\\Make Quiz\\\\BuildQuiz.js\";\nimport React from 'react';\nimport BuildQuestion from \"./buildQuestion\";\nimport QuizIntro from './QuizIntro';\nimport Button from \"react-bootstrap/Button\";\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\nimport './buildQuiz.css';\nimport ToQuizEndPage from \"./toQuizEndPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BuildQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.user = this.props.user;\n    this.state = {\n      questionsObj: {},\n      quizName: '',\n      questionAmount: '',\n      counter: 1\n    };\n    this.addQuestionObj = this.addQuestionObj.bind(this);\n    this.checkQuizIntro = this.checkQuizIntro.bind(this);\n    this.checkQuestionAmount = this.checkQuestionAmount.bind(this);\n    this.setQuestionAmount = this.setQuestionAmount.bind(this);\n    this.setQuizName = this.setQuizName.bind(this);\n    this.incrementCounter = this.incrementCounter.bind(this);\n    this.sendQuizObj = this.sendQuizObj.bind(this);\n    this.wholeQuizObj = {};\n  }\n\n  addQuestionObj(questionObj) {\n    let objKey = Object.keys(questionObj);\n    let objValue = Object.values(questionObj);\n    this.setState({\n      questionsObj: { ...this.state.questionsObj,\n        [objKey]: objValue[0]\n      }\n    });\n  }\n\n  checkQuizIntro() {\n    return this.state.quizName.length === 0 && this.state.questionAmount.length === 0;\n  }\n\n  setQuizName(quizName) {\n    this.setState({\n      quizName: quizName\n    });\n  }\n\n  setQuestionAmount(questionAmount) {\n    this.setState({\n      questionAmount: questionAmount\n    });\n  }\n\n  checkQuestionAmount() {\n    return parseInt(this.state.questionAmount) > Object.keys(this.state.questionsObj).length;\n  }\n\n  async sendQuizObj() {\n    const response = await ServerConnection.postQuiz(this.state.quizName, this.user, this.state.questionsObj).then(response => response);\n    alert(response);\n  }\n\n  incrementCounter() {\n    let counter = this.state.counter;\n    this.setState({\n      counter: counter++\n    });\n  } // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //     this.setState({prevState});\n  // }\n  //\n  // componentDidUpdate() {\n  //     return true;\n  // }\n\n\n  render() {\n    let runQuizintro;\n\n    if (this.checkQuizIntro()) {\n      runQuizintro = /*#__PURE__*/_jsxDEV(QuizIntro, {\n        setQuizName: this.setQuizName,\n        setQuestionAmount: this.setQuestionAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 28\n      }, this);\n    } else {\n      runQuizintro = null;\n    }\n\n    let buildQuestion;\n\n    if (!this.checkQuizIntro() && this.checkQuestionAmount()) {\n      buildQuestion = /*#__PURE__*/_jsxDEV(BuildQuestion, {\n        addQuestionObj: this.addQuestionObj,\n        questionNumber: Object.keys(this.state.questionsObj).length + 1,\n        incrementCounter: this.incrementCounter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }, this);\n    } else {\n      buildQuestion = null;\n    }\n\n    let submitButton;\n\n    if (!this.checkQuestionAmount() && !this.checkQuizIntro()) {\n      submitButton = /*#__PURE__*/_jsxDEV(ToQuizEndPage, {\n        quizName: this.state.quizName,\n        user: this.user,\n        questionsObj: this.state.questionsObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }, this);\n    } else {\n      submitButton = null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Quiz\",\n      children: [runQuizintro, buildQuestion, submitButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default BuildQuiz;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/components/Make Quiz/BuildQuiz.js"],"names":["React","BuildQuestion","QuizIntro","Button","ServerConnection","ToQuizEndPage","BuildQuiz","Component","constructor","props","user","state","questionsObj","quizName","questionAmount","counter","addQuestionObj","bind","checkQuizIntro","checkQuestionAmount","setQuestionAmount","setQuizName","incrementCounter","sendQuizObj","wholeQuizObj","questionObj","objKey","Object","keys","objValue","values","setState","length","parseInt","response","postQuiz","then","alert","render","runQuizintro","buildQuestion","submitButton"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport BuildQuestion from \"./buildQuestion\";\r\nimport QuizIntro from './QuizIntro';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\r\nimport './buildQuiz.css'\r\nimport ToQuizEndPage from \"./toQuizEndPage\";\r\n\r\n\r\nclass BuildQuiz extends React.Component {\r\n    constructor(props){\r\n        super (props);\r\n        this.user = this.props.user;\r\n        this.state = {\r\n            questionsObj: {},\r\n            quizName: '',\r\n            questionAmount: '',\r\n            counter: 1}\r\n        this.addQuestionObj = this.addQuestionObj.bind(this);\r\n        this.checkQuizIntro = this.checkQuizIntro.bind(this);\r\n        this.checkQuestionAmount = this.checkQuestionAmount.bind(this);\r\n        this.setQuestionAmount = this.setQuestionAmount.bind(this);\r\n        this.setQuizName = this.setQuizName.bind(this);\r\n        this.incrementCounter = this.incrementCounter.bind(this);\r\n        this.sendQuizObj = this.sendQuizObj.bind(this);\r\n\r\n        this.wholeQuizObj={}\r\n    }\r\n\r\n    addQuestionObj(questionObj) {\r\n        let objKey = Object.keys(questionObj)\r\n        let objValue = Object.values(questionObj)\r\n        this.setState(({\r\n            questionsObj: { ...this.state.questionsObj, [objKey]: objValue[0]}\r\n        }))}\r\n\r\n    checkQuizIntro() {\r\n        return (this.state.quizName.length === 0 && this.state.questionAmount.length === 0);\r\n\r\n    }\r\n\r\n    setQuizName(quizName) {\r\n        this.setState({quizName: quizName})\r\n\r\n    }\r\n\r\n    setQuestionAmount(questionAmount) {\r\n        this.setState({questionAmount: questionAmount})\r\n    }\r\n\r\n\r\n    checkQuestionAmount() {\r\n        return parseInt(this.state.questionAmount) > Object.keys(this.state.questionsObj).length;\r\n    }\r\n\r\n    async sendQuizObj() {\r\n        const response = await ServerConnection.postQuiz(this.state.quizName, this.user, this.state.questionsObj).then(response => response)\r\n        alert(response)\r\n\r\n    }\r\n\r\n    incrementCounter() {\r\n        let counter = this.state.counter;\r\n        this.setState({counter: counter++})\r\n    }\r\n\r\n    // getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    //     this.setState({prevState});\r\n    // }\r\n    //\r\n    // componentDidUpdate() {\r\n    //     return true;\r\n    // }\r\n\r\n    render() {\r\n        let runQuizintro;\r\n        if (this.checkQuizIntro()) {\r\n            runQuizintro = <QuizIntro setQuizName={this.setQuizName} setQuestionAmount={this.setQuestionAmount}/>\r\n        } else {\r\n            runQuizintro = null;\r\n\r\n        }\r\n\r\n        let buildQuestion;\r\n        if (!this.checkQuizIntro() && this.checkQuestionAmount()) {\r\n            buildQuestion = <BuildQuestion\r\n                addQuestionObj={this.addQuestionObj}\r\n                questionNumber={Object.keys(this.state.questionsObj).length + 1}\r\n                incrementCounter={this.incrementCounter}/>\r\n        } else {\r\n            buildQuestion = null;\r\n        }\r\n\r\n        let submitButton;\r\n        if (!this.checkQuestionAmount() && !this.checkQuizIntro()) {\r\n            submitButton = <ToQuizEndPage quizName={this.state.quizName} user={this.user} questionsObj={this.state.questionsObj}/>;\r\n        } else {\r\n            submitButton = null;\r\n        }\r\n\r\n        return(<div className=\"Quiz\">\r\n            {runQuizintro}\r\n            {buildQuestion}\r\n            {submitButton}\r\n        </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default BuildQuiz;"]},"metadata":{},"sourceType":"module"}