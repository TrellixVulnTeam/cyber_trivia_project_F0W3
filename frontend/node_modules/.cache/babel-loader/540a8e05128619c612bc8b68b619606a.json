{"ast":null,"code":"const fetch = require('node-fetch'); //\n\n\nconst ServerConnection = {\n  url: \"http://127.0.0.1:5000/\",\n\n  async getQuiz(quiz, jwt_token) {\n    try {\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        headers: {\n          \"content-type\": \"application/json\",\n          \"connection\": \"keep-alive\"\n        }\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return Object.values(jsonResponse);\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async postQuiz(quiz, user, questionObj) {\n    try {\n      const data = JSON.stringify({\n        \"user\": user,\n        \"question_dict\": questionObj\n      });\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        method: \"POST\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async deleteQuiz(quiz) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        method: \"DELETE\",\n        headers: headers\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async putQuiz(quiz, addOrRemove, question, user) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n\n      if (addOrRemove === \"add_question\") {\n        const data = JSON.stringify({\n          add_or_remove: \"True\",\n          \"user\": user,\n          \"question_added\": question\n        });\n        const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n          method: \"PUT\",\n          headers: headers,\n          body: data\n        });\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          return jsonResponse['message'];\n        } else if (addOrRemove === \"remove_question\") {\n          const data = JSON.stringify({\n            add_or_remove: \"True\",\n            \"user\": user,\n            \"question_removed\": question\n          });\n          const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n            method: \"PUT\",\n            headers: headers,\n            body: data\n          });\n\n          if (response.ok) {\n            const jsonResponse = await response.json();\n            return jsonResponse['message'];\n          }\n        }\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async getQuizzes() {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}quizzes`, {\n        headers: headers\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['quizzes'];\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async register(user, password) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"password\": password\n      });\n      const response = await fetch(`${ServerConnection.url}user/${user}`, {\n        method: \"POST\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async auth(user, password) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"username\": user,\n        \"password\": password\n      });\n      const response = await fetch(`${ServerConnection.url}auth`, {\n        method: \"POST\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['access_token'];\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async updatePercentage(quizName, percentage, user) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"percentage\": percentage,\n        \"quiz_name\": quizName\n      });\n      const response = await fetch(`${ServerConnection.url}user/${user}`, {\n        method: \"PUT\",\n        body: data,\n        headers: headers\n      });\n\n      if (response.ok) {\n        let jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async getStats(username) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}user/${username}`, {\n        headers: headers\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  }\n\n};\nexport default ServerConnection;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/components/Main Page/Api Connection/serverConnection.js"],"names":["fetch","require","ServerConnection","url","getQuiz","quiz","jwt_token","response","headers","ok","jsonResponse","json","Object","values","Error","error","document","write","postQuiz","user","questionObj","data","JSON","stringify","method","body","deleteQuiz","putQuiz","addOrRemove","question","add_or_remove","getQuizzes","register","password","auth","updatePercentage","quizName","percentage","getStats","username"],"mappings":"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","sourcesContent":["const fetch = require('node-fetch')\r\n\r\n\r\n\r\n//\r\nconst ServerConnection = {\r\n    url: \"http://127.0.0.1:5000/\",\r\n\r\n\r\n\r\n    async getQuiz(quiz, jwt_token) {\r\n        try {\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", }});\r\n            if (response.ok) {\r\n                const jsonResponse =  await response.json();\r\n                return Object.values(jsonResponse);\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch(error) {\r\n            document.write(error);\r\n        }\r\n    },\r\n\r\n    async postQuiz(quiz, user, questionObj) {\r\n        try {\r\n            const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async deleteQuiz(quiz) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error);\r\n        }\r\n\r\n    },\r\n\r\n    async putQuiz(quiz, addOrRemove, question, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            if (addOrRemove === \"add_question\") {\r\n                const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\r\n                const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\r\n                if (response.ok) {\r\n                    const jsonResponse = await response.json();\r\n                    return jsonResponse['message'];\r\n\r\n\r\n            }\r\n            else if (addOrRemove === \"remove_question\") {\r\n                    const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\r\n                    const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\r\n                    if (response.ok) {\r\n                        const jsonResponse = await response.json();\r\n                        return jsonResponse['message'];\r\n                    }\r\n            }\r\n        }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n     async getQuizzes() {\r\n        try {\r\n             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n             const response = await fetch(`${ServerConnection.url}quizzes`, {headers: headers});\r\n             if (response.ok) {\r\n                 const jsonResponse = await response.json();\r\n                 return jsonResponse['quizzes'];\r\n             }\r\n             throw new Error('Request failed!');\r\n         }\r\n        catch (error) {\r\n            document.write(error)\r\n    }},\r\n\r\n     async register(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const data = JSON.stringify({\"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"POST\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n\r\n    },\r\n\r\n    async auth(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"username\": user, \"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['access_token'];\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async updatePercentage(quizName, percentage, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\r\n            if (response.ok) {\r\n                let jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async getStats(username) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\r\n            if (response.ok) {\r\n                return await response.json();\r\n                \r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ServerConnection;"]},"metadata":{},"sourceType":"module"}