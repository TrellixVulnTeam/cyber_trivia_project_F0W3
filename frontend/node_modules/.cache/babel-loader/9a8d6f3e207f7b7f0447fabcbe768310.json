{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coolermaster\\\\PycharmProjects\\\\Updated_trivia_project\\\\frontend\\\\src\\\\components\\\\Do Quiz\\\\DoQuiz.js\";\nimport React from 'react';\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\nimport DoQuestion from \"./DoQuestion\";\nimport Button from \"react-bootstrap/Button\";\nimport HomeButton from \"../Sign Up/returnToHomePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DoQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getQuiz = this.getQuiz.bind(this);\n    this.questionList = [];\n    this.userAnswers = [];\n    this.getScore = this.getScore.bind(this);\n  }\n\n  async getQuiz() {\n    this.questionList = await ServerConnection.getQuiz(this.props.quiz, this.props.jwtToken).then(response => response);\n  }\n\n  addAnswer(answer) {\n    this.userAnswers.push(answer);\n  }\n\n  showResult() {\n    return this.userAnswers.length < this.questionList.length;\n  }\n\n  getScore() {\n    return this.userAnswers * 100 / this.questionList.length;\n  }\n\n  async updatePercentage() {\n    const percentage = this.getScore();\n    return await ServerConnection.updatePercentage(this.props.quiz, percentage, this.props.user);\n  }\n\n  render() {\n    this.getQuiz();\n    let questionsList = this.questionList.map(question => /*#__PURE__*/_jsxDEV(DoQuestion, {\n      question: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 63\n    }, this));\n    let quizShow;\n\n    if (this.showResult()) {\n      quizShow = {\n        questionsList\n      };\n    } else {\n      quizShow = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-section\",\n        children: [\"You scored \", this.getScore(), \" out of 100! submitButton = \", /*#__PURE__*/_jsxDEV(Button, {\n          block: true,\n          size: \"lg\",\n          type: \"submit\",\n          onClick: this.updatePercentage.bind(this),\n          children: \"Submit Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(HomeButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz\",\n      children: quizShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default DoQuiz;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/components/Do Quiz/DoQuiz.js"],"names":["React","ServerConnection","DoQuestion","Button","HomeButton","DoQuiz","Component","constructor","props","getQuiz","bind","questionList","userAnswers","getScore","quiz","jwtToken","then","response","addAnswer","answer","push","showResult","length","updatePercentage","percentage","user","render","questionsList","map","question","quizShow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;;AAEA,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAOA,KAAP;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEY,QAAPD,OAAO,GAAG;AACb,SAAKE,YAAL,GAAoB,MAAMV,gBAAgB,CAACQ,OAAjB,CAAyB,KAAKD,KAAL,CAAWM,IAApC,EAA0C,KAAKN,KAAL,CAAWO,QAArD,EAA+DC,IAA/D,CAAoEC,QAAQ,IAAIA,QAAhF,CAA1B;AACF;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,SAAKP,WAAL,CAAiBQ,IAAjB,CAAsBD,MAAtB;AACH;;AAEDE,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKT,WAAL,CAAiBU,MAAjB,GAA0B,KAAKX,YAAL,CAAkBW,MAAnD;AACH;;AAEDT,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKD,WAAL,GAAmB,GAAnB,GAAyB,KAAKD,YAAL,CAAkBW,MAAlD;AACH;;AAEqB,QAAhBC,gBAAgB,GAAG;AACrB,UAAMC,UAAU,GAAG,KAAKX,QAAL,EAAnB;AACA,WAAO,MAAMZ,gBAAgB,CAACsB,gBAAjB,CAAkC,KAAKf,KAAL,CAAWM,IAA7C,EAAmDU,UAAnD,EAA+D,KAAKhB,KAAL,CAAWiB,IAA1E,CAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,SAAKjB,OAAL;AACA,QAAIkB,aAAa,GAAG,KAAKhB,YAAL,CAAkBiB,GAAlB,CAAsBC,QAAQ,iBAAI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAlC,CAApB;AACA,QAAIC,QAAJ;;AACA,QAAI,KAAKT,UAAL,EAAJ,EAAuB;AACnBS,MAAAA,QAAQ,GAAI;AAACH,QAAAA;AAAD,OAAZ;AACH,KAFD,MAEO;AACHG,MAAAA,QAAQ,gBACJ;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kCACgB,KAAKjB,QAAL,EADhB,+CAEmB,QAAC,MAAD;AAAQ,UAAA,KAAK,MAAb;AAAc,UAAA,IAAI,EAAC,IAAnB;AAAwB,UAAA,IAAI,EAAC,QAA7B;AAAsC,UAAA,OAAO,EAAE,KAAKU,gBAAL,CAAsBb,IAAtB,CAA2B,IAA3B,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFnB,eAGI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;;AACD,wBAAQ;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACHoB;AADG;AAAA;AAAA;AAAA;AAAA,YAAR;AAKH;;AAlDgC;;AAqDrC,eAAezB,MAAf","sourcesContent":["import React from 'react';\r\nimport ServerConnection from \"../Main Page/Api Connection/serverConnection\";\r\nimport DoQuestion from \"./DoQuestion\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport HomeButton from \"../Sign Up/returnToHomePage\";\r\n\r\nclass DoQuiz extends React.Component {\r\n    constructor(props) {\r\n        super (props);\r\n        this.getQuiz = this.getQuiz.bind(this);\r\n        this.questionList = [];\r\n        this.userAnswers = []\r\n        this.getScore = this.getScore.bind(this);\r\n    }\r\n\r\n    async getQuiz() {\r\n       this.questionList = await ServerConnection.getQuiz(this.props.quiz, this.props.jwtToken).then(response => response);\r\n    }\r\n\r\n    addAnswer(answer) {\r\n        this.userAnswers.push(answer);\r\n    }\r\n\r\n    showResult() {\r\n        return this.userAnswers.length < this.questionList.length;\r\n    }\r\n\r\n    getScore() {\r\n        return this.userAnswers * 100 / this.questionList.length;\r\n    }\r\n\r\n    async updatePercentage() {\r\n        const percentage = this.getScore();\r\n        return await ServerConnection.updatePercentage(this.props.quiz, percentage, this.props.user)\r\n    }\r\n\r\n    render() {\r\n        this.getQuiz();\r\n        let questionsList = this.questionList.map(question => <DoQuestion question={question}/>)\r\n        let quizShow;\r\n        if (this.showResult()) {\r\n            quizShow =  {questionsList}\r\n        } else {\r\n            quizShow =  (\r\n                <div className=\"score-section\">\r\n                    You scored {this.getScore()} out of 100!\r\n                    submitButton = <Button block size=\"lg\" type=\"submit\" onClick={this.updatePercentage.bind(this)}>Submit Quiz</Button>\r\n                    <HomeButton/>\r\n                </div>\r\n            )\r\n        }\r\n        return (<div className=\"quiz\">\r\n            {quizShow}\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoQuiz;"]},"metadata":{},"sourceType":"module"}