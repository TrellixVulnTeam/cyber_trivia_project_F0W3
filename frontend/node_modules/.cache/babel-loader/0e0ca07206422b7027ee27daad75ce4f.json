{"ast":null,"code":"import axios from 'axios';\nconst ServerConnection = {\n  url: \"http://127.0.0.1:5000/\",\n\n  async getQuiz(quiz, jwt_token) {\n    try {\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        headers: {\n          \"content-type\": \"application/json\",\n          \"connection\": \"keep-alive\",\n          \"Authorization\": \"JWT \" + jwt_token[1]\n        }\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async postQuiz(quiz, user, questionObj) {\n    try {\n      const data = JSON.stringify({\n        \"user\": user,\n        \"question_dict\": questionObj\n      });\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        method: \"POST\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async deleteQuiz(quiz) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n        method: \"DELETE\",\n        headers: headers\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async putQuiz(quiz, addOrRemove, question, user) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n\n      if (addOrRemove === \"add_question\") {\n        const data = JSON.stringify({\n          add_or_remove: \"True\",\n          \"user\": user,\n          \"question_added\": question\n        });\n        const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n          method: \"PUT\",\n          headers: headers,\n          body: data\n        });\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          return jsonResponse['message'];\n        } else if (addOrRemove === \"remove_question\") {\n          const data = JSON.stringify({\n            add_or_remove: \"True\",\n            \"user\": user,\n            \"question_removed\": question\n          });\n          const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {\n            method: \"PUT\",\n            headers: headers,\n            body: data\n          });\n\n          if (response.ok) {\n            const jsonResponse = await response.json();\n            return jsonResponse['message'];\n          }\n        }\n      }\n\n      throw new Error('Request failed!');\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  getQuizzes() {\n    const headers = {\n      \"content-type\": \"application/json\",\n      \"connection\": \"keep-alive\"\n    };\n    axios.get(`${this.url}quizzes`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      return jsonResponse['quizzes'];\n    }).catch(error => {\n      document.write(error);\n    }); //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\n    //     if (response.ok) {\n    //         const jsonResponse = await response.json();\n    //         return jsonResponse['quizzes'];\n    //     }\n    //     throw new Error('Request failed!');\n    // }\n    // catch (error) {\n    //     document.write(error)\n    // }\n  },\n\n  async register(user, password) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"password\": password\n      });\n      const response = await fetch(`${ServerConnection.url}user/${user}`, {\n        method: \"PUT\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['message'];\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async auth(user, password) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"username\": user,\n        \"password\": password\n      });\n      const response = await fetch(`${ServerConnection.url}auth`, {\n        method: \"POST\",\n        headers: headers,\n        body: data\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse['access_token'];\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async updatePercentage(quizName, percentage, user) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const data = JSON.stringify({\n        \"percentage\": percentage,\n        \"quiz_name\": quizName\n      });\n      const response = await fetch(`${ServerConnection.url}user/${user}`, {\n        method: \"PUT\",\n        body: data,\n        headers: headers\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  },\n\n  async getStats(username) {\n    try {\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"connection\": \"keep-alive\"\n      };\n      const response = await fetch(`${ServerConnection.url}user/${username}`, {\n        headers: headers\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    } catch (error) {\n      document.write(error);\n    }\n  }\n\n};\nexport default ServerConnection;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/Main Page/Api Connection/serverConnection.js"],"names":["axios","ServerConnection","url","getQuiz","quiz","jwt_token","response","fetch","headers","ok","json","Error","error","document","write","postQuiz","user","questionObj","data","JSON","stringify","method","body","deleteQuiz","jsonResponse","putQuiz","addOrRemove","question","add_or_remove","getQuizzes","get","then","catch","register","password","auth","updatePercentage","quizName","percentage","getStats","username"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst ServerConnection = {\r\n    url: \"http://127.0.0.1:5000/\",\r\n\r\n\r\n\r\n    async getQuiz(quiz, jwt_token) {\r\n        try {\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", \"Authorization\": \"JWT \" + jwt_token[1]}});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch(error) {\r\n            document.write(error);\r\n        }\r\n    },\r\n\r\n    async postQuiz(quiz, user, questionObj) {\r\n        try {\r\n            const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async deleteQuiz(quiz) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error);\r\n        }\r\n\r\n    },\r\n\r\n    async putQuiz(quiz, addOrRemove, question, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            if (addOrRemove === \"add_question\") {\r\n                const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\r\n                const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\r\n                if (response.ok) {\r\n                    const jsonResponse = await response.json();\r\n                    return jsonResponse['message'];\r\n\r\n\r\n            }\r\n            else if (addOrRemove === \"remove_question\") {\r\n                    const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\r\n                    const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\r\n                    if (response.ok) {\r\n                        const jsonResponse = await response.json();\r\n                        return jsonResponse['message'];\r\n                    }\r\n            }\r\n        }\r\n            throw new Error('Request failed!');\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n     getQuizzes() {\r\n         const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n\r\n         axios.get(`${this.url}quizzes`, {headers: headers})\r\n             .then(response => {\r\n                 if (response.ok) {\r\n                     return response.json();\r\n                 }\r\n             }).then(jsonResponse => {\r\n                 return jsonResponse['quizzes']\r\n         }).catch(error => {\r\n             document.write(error);\r\n         })\r\n        //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\r\n        //     if (response.ok) {\r\n        //         const jsonResponse = await response.json();\r\n        //         return jsonResponse['quizzes'];\r\n        //     }\r\n        //     throw new Error('Request failed!');\r\n        // }\r\n        // catch (error) {\r\n        //     document.write(error)\r\n        // }\r\n    },\r\n\r\n    async register(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n            const data = JSON.stringify({\"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['message'];\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n\r\n    },\r\n\r\n    async auth(user, password) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"username\": user, \"password\": password});\r\n            const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse['access_token'];\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async updatePercentage(quizName, percentage, user) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\r\n            const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\")\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    },\r\n\r\n    async getStats(username) {\r\n        try {\r\n            const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n            const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\r\n            if (response.ok) {\r\n                return await response.json();\r\n            }\r\n            throw new Error(\"Request failed!\");\r\n        }\r\n        catch (error) {\r\n            document.write(error)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ServerConnection;"]},"metadata":{},"sourceType":"module"}