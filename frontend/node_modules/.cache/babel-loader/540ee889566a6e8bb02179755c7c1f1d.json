{"ast":null,"code":"import axios from 'axios';\nimport React, { useState } from 'react';\n\nclass ServerConnection {\n  constructor() {\n    this.url = 'http://127.0.0.1:5000/';\n    this.getQuizzes = this.getQuizzes.bind(this);\n  }\n\n  getQuizzes() {\n    const headers = {\n      \"content-type\": \"application/json\",\n      \"connection\": \"keep-alive\"\n    };\n    const [getMessage, setgetMessage] = useState({});\n    axios.get(`${this.url}quizzes`).then(function (response) {\n      return response.json();\n    }).catch(error => {\n      document.write(error);\n    });\n  } //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\n  //     if (response.ok) {\n  //         const jsonResponse = await response.json();\n  //         return jsonResponse['quizzes'];\n  //     }\n  //     throw new Error('Request failed!');\n  // }\n  // catch (error) {\n  //     document.write(error)\n  // }\n\n\n}\n\nexport default ServerConnection; //\n// const ServerConnection = {\n//     url: \"http://127.0.0.1:5000/\",\n//\n//\n//\n//     async getQuiz(quiz, jwt_token) {\n//         try {\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", \"Authorization\": \"JWT \" + jwt_token[1]}});\n//             if (response.ok) {\n//                 return await response.json();\n//             }\n//             throw new Error(\"Request failed!\");\n//         }\n//         catch(error) {\n//             document.write(error);\n//         }\n//     },\n//\n//     async postQuiz(quiz, user, questionObj) {\n//         try {\n//             const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\n//             if (response.ok) {\n//                 return await response.json();\n//             }\n//             throw new Error('Request failed!');\n//         }\n//         catch (error) {\n//             document.write(error)\n//         }\n//     },\n//\n//     async deleteQuiz(quiz) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\n//             if (response.ok) {\n//                 const jsonResponse = await response.json();\n//                 return jsonResponse['message'];\n//             }\n//             throw new Error('Request failed!');\n//         }\n//         catch (error) {\n//             document.write(error);\n//         }\n//\n//     },\n//\n//     async putQuiz(quiz, addOrRemove, question, user) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//             if (addOrRemove === \"add_question\") {\n//                 const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\n//                 const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\n//                 if (response.ok) {\n//                     const jsonResponse = await response.json();\n//                     return jsonResponse['message'];\n//\n//\n//             }\n//             else if (addOrRemove === \"remove_question\") {\n//                     const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\n//                     const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\n//                     if (response.ok) {\n//                         const jsonResponse = await response.json();\n//                         return jsonResponse['message'];\n//                     }\n//             }\n//         }\n//             throw new Error('Request failed!');\n//         }\n//         catch (error) {\n//             document.write(error)\n//         }\n//     },\n//\n//      getQuizzes() {\n//          const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//\n//          axios.get(`${this.url}quizzes`, {headers: headers})\n//              .then(response => {\n//                  if (response.ok) {\n//                      return response.json();\n//                  }\n//              }).then(jsonResponse => {\n//                  return jsonResponse['quizzes']\n//          }).catch(error => {\n//              document.write(error);\n//          })\n//         //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\n//         //     if (response.ok) {\n//         //         const jsonResponse = await response.json();\n//         //         return jsonResponse['quizzes'];\n//         //     }\n//         //     throw new Error('Request failed!');\n//         // }\n//         // catch (error) {\n//         //     document.write(error)\n//         // }\n//     },\n//\n//     async register(user, password) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\n//             const data = JSON.stringify({\"password\": password});\n//             const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", headers: headers, body: data})\n//             if (response.ok) {\n//                 const jsonResponse = await response.json();\n//                 return jsonResponse['message'];\n//             }\n//             throw new Error(\"Request failed!\")\n//         }\n//\n//         catch (error) {\n//             document.write(error)\n//         }\n//\n//     },\n//\n//     async auth(user, password) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//             const data = JSON.stringify({\"username\": user, \"password\": password});\n//             const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\n//             if (response.ok) {\n//                 const jsonResponse = await response.json();\n//                 return jsonResponse['access_token'];\n//             }\n//             throw new Error(\"Request failed!\");\n//         }\n//         catch (error) {\n//             document.write(error)\n//         }\n//     },\n//\n//     async updatePercentage(quizName, percentage, user) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//             const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\n//             const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\n//             if (response.ok) {\n//                 return await response.json();\n//             }\n//             throw new Error(\"Request failed!\")\n//         }\n//         catch (error) {\n//             document.write(error)\n//         }\n//     },\n//\n//     async getStats(username) {\n//         try {\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\n//             const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\n//             if (response.ok) {\n//                 return await response.json();\n//             }\n//             throw new Error(\"Request failed!\");\n//         }\n//         catch (error) {\n//             document.write(error)\n//         }\n//     }\n//\n// }\n//\n//\n// export default ServerConnection;","map":{"version":3,"sources":["C:/Users/coolermaster/PycharmProjects/Updated_trivia_project/frontend/src/Main Page/Api Connection/serverConnection.js"],"names":["axios","React","useState","ServerConnection","constructor","url","getQuizzes","bind","headers","getMessage","setgetMessage","get","then","response","json","catch","error","document","write"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,GAAE;AACT,SAAKC,GAAL,GAAW,wBAAX;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDD,EAAAA,UAAU,GAAG;AACT,UAAME,OAAO,GAAG;AAAC,sBAAgB,kBAAjB;AAAqC,oBAAc;AAAnD,KAAhB;AACA,UAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACAF,IAAAA,KAAK,CACAW,GADL,CACU,GAAE,KAAKN,GAAI,SADrB,EAEKO,IAFL,CAEU,UAAUC,QAAV,EAAoB;AACtB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACP,KAJD,EAIGC,KAJH,CAISC,KAAK,IAAI;AACdC,MAAAA,QAAQ,CAACC,KAAT,CAAeF,KAAf;AACH,KAND;AAOH,GAhBkB,CAiBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1Be;;AA8BvB,eAAeb,gBAAfsourcesContent":["import axios from 'axios';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nclass ServerConnection {\r\n    constructor(){\r\n        this.url = 'http://127.0.0.1:5000/'\r\n        this.getQuizzes = this.getQuizzes.bind(this);\r\n    }\r\n\r\n    getQuizzes() {\r\n        const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n        const [getMessage, setgetMessage] = useState({});\r\n        axios\r\n            .get(`${this.url}quizzes`)\r\n            .then(function (response) {\r\n                return response.json();\r\n        }).catch(error => {\r\n            document.write(error);\r\n        })\r\n    }\r\n        //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\r\n        //     if (response.ok) {\r\n        //         const jsonResponse = await response.json();\r\n        //         return jsonResponse['quizzes'];\r\n        //     }\r\n        //     throw new Error('Request failed!');\r\n        // }\r\n        // catch (error) {\r\n        //     document.write(error)\r\n        // }\r\n    }\r\n\r\n\r\nexport default ServerConnection;\r\n//\r\n// const ServerConnection = {\r\n//     url: \"http://127.0.0.1:5000/\",\r\n//\r\n//\r\n//\r\n//     async getQuiz(quiz, jwt_token) {\r\n//         try {\r\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {headers: {\"content-type\": \"application/json\", \"connection\": \"keep-alive\", \"Authorization\": \"JWT \" + jwt_token[1]}});\r\n//             if (response.ok) {\r\n//                 return await response.json();\r\n//             }\r\n//             throw new Error(\"Request failed!\");\r\n//         }\r\n//         catch(error) {\r\n//             document.write(error);\r\n//         }\r\n//     },\r\n//\r\n//     async postQuiz(quiz, user, questionObj) {\r\n//         try {\r\n//             const data = JSON.stringify({\"user\": user, \"question_dict\": questionObj})\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"POST\", headers: headers,body:data})\r\n//             if (response.ok) {\r\n//                 return await response.json();\r\n//             }\r\n//             throw new Error('Request failed!');\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//     },\r\n//\r\n//     async deleteQuiz(quiz) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//             const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"DELETE\", headers: headers})\r\n//             if (response.ok) {\r\n//                 const jsonResponse = await response.json();\r\n//                 return jsonResponse['message'];\r\n//             }\r\n//             throw new Error('Request failed!');\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error);\r\n//         }\r\n//\r\n//     },\r\n//\r\n//     async putQuiz(quiz, addOrRemove, question, user) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//             if (addOrRemove === \"add_question\") {\r\n//                 const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_added\": question})\r\n//                 const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method: \"PUT\", headers: headers, body: data})\r\n//                 if (response.ok) {\r\n//                     const jsonResponse = await response.json();\r\n//                     return jsonResponse['message'];\r\n//\r\n//\r\n//             }\r\n//             else if (addOrRemove === \"remove_question\") {\r\n//                     const data = JSON.stringify({add_or_remove: \"True\", \"user\": user, \"question_removed\": question});\r\n//                     const response = await fetch(`${ServerConnection.url}quiz/${quiz}`, {method:\"PUT\", headers: headers, body: data});\r\n//                     if (response.ok) {\r\n//                         const jsonResponse = await response.json();\r\n//                         return jsonResponse['message'];\r\n//                     }\r\n//             }\r\n//         }\r\n//             throw new Error('Request failed!');\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//     },\r\n//\r\n//      getQuizzes() {\r\n//          const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//\r\n//          axios.get(`${this.url}quizzes`, {headers: headers})\r\n//              .then(response => {\r\n//                  if (response.ok) {\r\n//                      return response.json();\r\n//                  }\r\n//              }).then(jsonResponse => {\r\n//                  return jsonResponse['quizzes']\r\n//          }).catch(error => {\r\n//              document.write(error);\r\n//          })\r\n//         //     const response = await fetch(`${ServerConnection.url}quizzes`, { headers: headers});\r\n//         //     if (response.ok) {\r\n//         //         const jsonResponse = await response.json();\r\n//         //         return jsonResponse['quizzes'];\r\n//         //     }\r\n//         //     throw new Error('Request failed!');\r\n//         // }\r\n//         // catch (error) {\r\n//         //     document.write(error)\r\n//         // }\r\n//     },\r\n//\r\n//     async register(user, password) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"}\r\n//             const data = JSON.stringify({\"password\": password});\r\n//             const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", headers: headers, body: data})\r\n//             if (response.ok) {\r\n//                 const jsonResponse = await response.json();\r\n//                 return jsonResponse['message'];\r\n//             }\r\n//             throw new Error(\"Request failed!\")\r\n//         }\r\n//\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//\r\n//     },\r\n//\r\n//     async auth(user, password) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//             const data = JSON.stringify({\"username\": user, \"password\": password});\r\n//             const response = await fetch(`${ServerConnection.url}auth`, {method: \"POST\", headers: headers, body: data})\r\n//             if (response.ok) {\r\n//                 const jsonResponse = await response.json();\r\n//                 return jsonResponse['access_token'];\r\n//             }\r\n//             throw new Error(\"Request failed!\");\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//     },\r\n//\r\n//     async updatePercentage(quizName, percentage, user) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//             const data = JSON.stringify({\"percentage\": percentage, \"quiz_name\": quizName});\r\n//             const response = await fetch(`${ServerConnection.url}user/${user}`, {method: \"PUT\", body: data, headers: headers})\r\n//             if (response.ok) {\r\n//                 return await response.json();\r\n//             }\r\n//             throw new Error(\"Request failed!\")\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//     },\r\n//\r\n//     async getStats(username) {\r\n//         try {\r\n//             const headers = {\"content-type\": \"application/json\", \"connection\": \"keep-alive\"};\r\n//             const response = await fetch(`${ServerConnection.url}user/${username}`, {headers: headers});\r\n//             if (response.ok) {\r\n//                 return await response.json();\r\n//             }\r\n//             throw new Error(\"Request failed!\");\r\n//         }\r\n//         catch (error) {\r\n//             document.write(error)\r\n//         }\r\n//     }\r\n//\r\n// }\r\n//\r\n//\r\n// export default ServerConnection;"]},"metadata":{},"sourceType":"module"}